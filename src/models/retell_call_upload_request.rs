/*
 * Roark Analytics API
 *
 * # Roark Analytics API - Voice AI Analytics Platform  The Roark Analytics API provides comprehensive monitoring, evaluation, and analytics capabilities for voice AI agents. This API allows developers to seamlessly integrate with the Roark platform to track call quality, analyze agent performance, and extract insights from voice interactions.  ## Key Features  - **Real-time Call Analysis**: Upload and analyze voice call recordings with AI-powered insights - **Sentiment Analysis**: Extract emotional tone, key phrases, and sentiment scores across 64+ emotions - **Agent Performance Evaluation**: Create custom evaluation jobs with configurable metrics and scoring - **Platform Integrations**: Native support for VAPI and Retell AI with webhook-based data ingestion - **Custom Analytics**: Build custom analytics pipelines with flexible data models and properties  ## Authentication  All API endpoints require Bearer token authentication. Include your API token in the Authorization header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  ## Rate Limiting  The API implements rate limiting to ensure service stability. Rate limit headers are included in responses.  ## Error Handling  The API uses standard HTTP status codes and returns structured error responses with detailed error information including error types, codes, and human-readable messages.  ## Rust Code Generation  This OpenAPI specification has been optimized for Rust code generation with: - Snake_case field naming conventions - Proper nullable field handling with Option<T> - Comprehensive documentation for generated code - Type-safe enum definitions - Structured error handling
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@roark.ai
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RetellCallUploadRequest : Request payload for uploading a Retell call to Roark
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RetellCallUploadRequest {
    /// Raw Retell call_ended webhook payload forwarded directly from Retell
    #[serde(rename = "retell_call_ended_payload")]
    pub retell_call_ended_payload: std::collections::HashMap<String, serde_json::Value>,
    /// Optional custom properties to include with the call for filtering and display
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<std::collections::HashMap<String, serde_json::Value>>,
    /// Skip import if a call with the same Retell call ID already exists
    #[serde(rename = "skip_already_imported", skip_serializing_if = "Option::is_none")]
    pub skip_already_imported: Option<bool>,
}

impl RetellCallUploadRequest {
    /// Request payload for uploading a Retell call to Roark
    pub fn new(retell_call_ended_payload: std::collections::HashMap<String, serde_json::Value>) -> RetellCallUploadRequest {
        RetellCallUploadRequest {
            retell_call_ended_payload,
            properties: None,
            skip_already_imported: None,
        }
    }
}

